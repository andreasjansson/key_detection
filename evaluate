#!/usr/bin/python

# TODO: cache matrices

import util
import argparse
import pickle
import random
import math

def evaluate(mp3dir, labdir, train_percent = 50, limit = None):
    train_percent = min(max(train_percent, 0), 100)
    filenames = [(mp3, lab) for mp3, lab in util.filenames_from_twin_directories(mp3dir, labdir, limit)]
    random.shuffle(filenames)
    if limit:
        filenames = filenames[:limit]
    split = int(math.ceil(len(filenames) * train_percent / 100))
    training = filenames[:split]
    testing = filenames[split:]

    model = util.get_aggregate_markov_matrices(training)
    scoreboard = util.Scoreboard()
    for mp3_file, lab_file in testing:
        print '\nTesting ' + mp3_file
        lab = util.KeyLab(lab_file)
        actual_key = lab.majority_key()
        test_matrix = util.get_test_matrix(mp3_file)
        key = util.get_key(model, test_matrix)
        diff = actual_key.compare(key)
        print 'Predicted: %s; Actual: %s; Diff: %s' % (key, actual_key, diff.name())
        scoreboard.add(diff)

    scoreboard.print_scores()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Train key detector')
    parser.add_argument('-m', '--mp3dir', required = True)
    parser.add_argument('-l', '--labdir', required = True)
    parser.add_argument('-t', '--trainpercent', type = int, default = 50)
    parser.add_argument('--limit', type = int)
    args = parser.parse_args()
    evaluate(args.mp3dir, args.labdir, args.trainpercent, args.limit)
