#!/usr/bin/python

# TODO: cache matrices

import argparse
import pickle
import random
import math
import pickle

from keydetection import *

def evaluate(mp3dir, labdir, train_percent = 50, limit = None, overlap = False):
    train_percent = min(max(train_percent, 0), 100)
    filenames = [(mp3, lab) for mp3, lab in filenames_from_twin_directories(mp3dir, labdir)]
    random.shuffle(filenames)
    if limit:
        filenames = filenames[:limit]

    if overlap:
        training = filenames
        testing = filenames
    else:
        split = int(math.ceil(len(filenames) * train_percent / 100))
        training = filenames[:split]
        testing = filenames[split:]

    model = get_aggregate_markov_matrices(training)

    with open('evaluate_model.pkl', 'wb') as outfile:
        pickle.dump(model, outfile)

    scoreboard = Scoreboard()
    for mp3_file, lab_file in testing:
        lab = KeyLab(lab_file)

        # songs with multiple keys is very hard. too hard for
        # this challenge.
        if lab.key_count() > 1:
            print '\n%s has more than one key (%s), skipping' % (lab_file, ', '.join(map(repr, lab.real_keys())))
            continue

        actual_key = lab.majority_key()

        if actual_key is None:
            continue

        print '\nTesting ' + mp3_file
        try:
            test_matrix = get_test_matrix(mp3_file)
            key = get_key(model, test_matrix)
            diff = actual_key.compare(key)
            print 'Predicted: %s; Actual: %s; Diff: %s' % (key, actual_key, diff.name())
            scoreboard.add(diff)
        except Exception:
            print 'Failed to test %s' % mp3_file

    scoreboard.print_scores()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Train key detector')
    parser.add_argument('-m', '--mp3dir', required = True)
    parser.add_argument('-l', '--labdir', required = True)
    parser.add_argument('-t', '--trainpercent', type = int, default = 50)
    parser.add_argument('-o', '--overlap', action = 'store_true')
    parser.add_argument('--limit', type = int)
    args = parser.parse_args()
    evaluate(args.mp3dir, args.labdir, args.trainpercent, args.limit, args.overlap)
